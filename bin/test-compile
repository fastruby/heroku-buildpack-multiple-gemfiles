#!/usr/bin/env bash
# bin/test-compile <build-dir> <cache-dir>

# This was a great aid to writing this script:
# https://github.com/heroku/heroku-buildpack-ci-postgresql/blob/master/bin/compile

# fail fast
#set -e

# debug
#set -x

echo "-----> In bin/test-compile"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


# The heroku ruby buildpack will have already installed the gems for the default Gemfile, so now
# install the missing gems from Gemfile.next. We want gem versions from both Gemfiles to be in the
# app for parity with the production slug.
echo "-----> Installing Gemfile.next gems"
cd $BUILD_DIR
bundle_without="development"
set -o pipefail # Enable pipefail so failure exit code from bundle install will not be lost by pipe to indent.
BUNDLE_GEMFILE=Gemfile.next bundle config set --local deployment 'true'
BUNDLE_GEMFILE=Gemfile.next bundle config set --local path 'vendor/bundle'
BUNDLE_GEMFILE=Gemfile.next bundle config set --local without $bundle_without
BUNDLE_GEMFILE=Gemfile.next bundle binstubs --all
BUNDLE_GEMFILE=Gemfile.next bundle install -j4 | indent
bundle_install_status=$?
set +o pipefail # Disable pipefail, only needed for above command as it is pipes to indent.

if [ $bundle_install_status -ne 0 ]; then
  error "bundle install error: This can happen when Gemfile.next.lock falls out of sync with Gemfile.next. Check the committed Gemfile.next.lock is up-to-date."
fi

echo "-----> Writing .profile.d/multiple-gemfiles.sh to run on dyno startup"
mkdir -p .profile.d
cat<<\EOF > .profile.d/multiple-gemfiles.sh
server_id=$CI_NODE_INDEX

echo "[multiple-gemfiles.sh] Preparing env vars for server: $server_id"
echo "---------------------> Unsetting DEPENDENCIES_NEXT"
unset DEPENDENCIES_NEXT
echo "---------------------> Unsetting BUNDLE_GEMFILE"
unset BUNDLE_GEMFILE

# DEPENDENCIES_NEXT_CI_NODES is a comma-separated string of CI node indexes that should use
# Gemfile.next (glob wildcards can be used though you probably don't want to do this in CI):
#
# e.g. DEPENDENCIES_NEXT_CI_NODES=5,6,7
next_server_ids=$DEPENDENCIES_NEXT_CI_NODES

function is_next_server() {
  # Split on comma into next_servers array
  IFS=',' # set comma as delimiter
  read -ra next_servers <<< "$next_server_ids" # split on comma delimiter

  for next_server in "${next_servers[@]}"; do
    # This supports glob matching (*)
    if [[ "$server_id" == $next_server ]]; then
      # matches => this server will use Gemfile.next.
      true
      return
    fi
  done

  # No match => this server will use Gemfile.
  false
  return
}

if [ -n "$next_server_ids" ]; then
  if is_next_server; then
    echo "---------------------> Setting DEPENDENCIES_NEXT=true"
    export DEPENDENCIES_NEXT=true
    echo "---------------------> Setting BUNDLE_GEMFILE=$HOME/Gemfile.next"
    export BUNDLE_GEMFILE=$HOME/Gemfile.next
  fi
fi

EOF

echo "-----> Multiple Gemfiles done"
